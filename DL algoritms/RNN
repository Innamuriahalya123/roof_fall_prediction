# Import necessary libraries
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from torch.utils.data import TensorDataset, DataLoader
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Load the dataset
data = pd.read_csv('capstone.csv')

# Define X and y, then drop 'Roof Fall Rate' and 'S.no' from X
X = data.drop(columns=['Roof Fall Rate', 'S.no'])
y = data['Roof Fall Rate']  # Define the target variable

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)

# Scale the feature data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Reshape for RNN (samples, timesteps, features)
# For simplicity, we're assuming 1 timestep
X_train_rnn = X_train.reshape(X_train.shape[0], 1, X_train.shape[1])
X_test_rnn = X_test.reshape(X_test.shape[0], 1, X_test.shape[1])

# Convert data to PyTorch tensors and create a TensorDataset for training
X_train_tensor = torch.tensor(X_train_rnn, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train.to_numpy(), dtype=torch.float32)
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)

# Define the RNN model
class CapstoneRNN(nn.Module):
    def __init__(self, input_dim, hidden_dim=256, output_dim=1):
        super(CapstoneRNN, self).__init__()
        self.rnn = nn.RNN(input_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        rnn_out, _ = self.rnn(x)  # Get RNN output
        last_hidden_state = rnn_out[:, -1, :]  # We only care about the last timestep
        return self.fc(last_hidden_state)

# Set hyperparameters
input_dim = X_train_rnn.shape[2]
output_dim = 1
batch_size = 32
learning_rate = 0.01
num_epochs = 2000

# Initialize model and optimizer
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CapstoneRNN(input_dim).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

# Use Huber Loss for regression
criterion = nn.SmoothL1Loss()

# Create DataLoader for training
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

# Training loop
print(f'\nTraining with Huber Loss:')
for epoch in range(num_epochs):
    model.train()
    epoch_losses = []
    for features, targets in train_loader:
        features, targets = features.to(device), targets.to(device)
        optimizer.zero_grad()
        output = model(features)
        loss = criterion(output.view(-1), targets)
        loss.backward()
        optimizer.step()
        epoch_losses.append(loss.item())
    if epoch % 100 == 0:  # Log every 50 epochs
        print(f'Epoch {epoch}, Loss: {np.mean(epoch_losses):.4f}')

# Test the model and calculate metrics
model.eval()
with torch.no_grad():
    X_test_tensor = torch.tensor(X_test_rnn, dtype=torch.float32).to(device)
    y_test_tensor = torch.tensor(y_test.to_numpy(), dtype=torch.float32).to(device)
    y_pred = model(X_test_tensor).view(-1).cpu().numpy()
    y_test = y_test_tensor.cpu().numpy()  # Convert to NumPy array

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
nrmse = rmse / (y_test.max() - y_test.min())
variance = np.var(y_test)  # Variance of the original target variable
nmse = mse / variance  # Normalized MSE

# Calculate MAD (Mean Absolute Deviation)
mad = np.mean(np.abs(y_test - y_pred))

# Calculate MAPE (Mean Absolute Percentage Error)
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100

# Print the metrics
print(f'\nEvaluation Metrics:')
print(f'RMSE: {rmse:.4f}')
print(f'MSE: {mse:.4f}')
print(f'RÂ²: {r2:.4f}')
print(f'MAE: {mae:.4f}')
print(f'NRMSE: {nrmse:.4f}')
print(f'Normalized MSE (nMSE): {nmse:.4f}')
print(f'MAD: {mad:.4f}')
print(f'MAPE: {mape:.4f}%')
