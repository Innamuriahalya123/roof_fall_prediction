import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load dataset
file_path = 'capstone.csv'  # Replace with your file path
data = pd.read_csv(file_path)

# Preprocessing
X = data.drop(columns=['Roof Fall Rate', 'S.no'])  # Drop target and irrelevant columns
y = data['Roof Fall Rate']  # Target variable

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=36)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Additional metrics
rmse = np.sqrt(mse)
nrmse = rmse / (y.max() - y.min())  # Normalize by the range of target values
nmse = mse / np.var(y)  # Normalize by the variance of the target values
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100  # Mean Absolute Percentage Error
mad = np.mean(np.abs(y_test - y_pred))  # Mean Absolute Deviation

# Print evaluation metrics
print("Model Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"Normalized RMSE (NRMSE): {nrmse}")
print(f"Normalized MSE (NMSE): {nmse}")
print(f"Mean Absolute Percentage Error (MAPE): {mape}%")
print(f"Mean Absolute Deviation (MAD): {mad}")
print(f"R-squared (R2): {r2}")

# Coefficients and Intercept
print("\nModel Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef}")
print(f"Intercept: {model.intercept_}")
